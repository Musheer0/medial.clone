// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]    @relation("writtenPosts")
  likedPosts    PostLike[] @relation("UserLikesPosts")
  savedPosts    PostSave[] @relation("UserSavesPosts")
  comments      Comment[] @relation("UserComments")
  votes  Vote[] @relation("user-votes")
  @@map("users")
}

model Post {
  id            String   @id @default(cuid())
  caption       String
  user          User     @relation("writtenPosts", fields: [userId], references: [id])
  userId        String
  like_count    Int      @default(0)
  save_count    Int      @default(0)
  share_count   Int      @default(0)
  comment_count Int      @default(0)
  likedBy       PostLike[] @relation("PostLikedByUsers")
  savedBy       PostSave[] @relation("PostSavedByUsers")
  comments      Comment[] @relation("PostComments")
 createdAt      DateTime  @default(now())
  @@map("posts")
}

model PostLike {
  userId String
  postId String
  user   User @relation("UserLikesPosts", fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation("PostLikedByUsers", fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@map("post_likes")
}

model PostSave {
  userId String
  postId String
  user   User @relation("UserSavesPosts", fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation("PostSavedByUsers", fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@map("post_saves")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  userId    String
  post      Post     @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("comments")
}

model Vote{
  id String @id @default(cuid()) @unique
  voter    User   @relation("user-votes", fields: [userId], references: [id])
  userId   String
  poll     Poll   @relation("poll-votes", fields: [pollId], references: [id])
  pollId   String
 option String
}
model Poll {
  id String @id @default(cuid()) 
  options String[]
  userId  String
  votes      Vote[]   @relation("poll-votes")
  vote_count Int  @default(0)
 caption  String @default("untitled poll")
  createAt DateTime @default(now())
  @@map("poll")
  }