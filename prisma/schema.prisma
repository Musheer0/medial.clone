generator client {
  provider        = "prisma-client-js"

}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  bio             String      @default("Glad to be in medial")
  location    String?
  tagline String?         @default("user at medial")
  createdAt  DateTime @default(now())
  username   String?  @unique
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]     @relation("writtenPosts")
  likedPosts    PostLike[] @relation("UserLikesPosts")
  savedPosts    PostSave[] @relation("UserSavesPosts")
  votes         Vote[]     @relation("UserVotes")
  polls         Poll[]     @relation("UserPolls")
  follower_count BigInt @default(0)
  follwer Follow[] @relation("user-follower")
  follwing Follow[] @relation("user-following")
  comments Comment[] @relation("comment")
  @@map("users")
}

model Post {
  type          String     @default("post")
  id            String     @id @default(cuid())
  caption       String
  user          User       @relation("writtenPosts", fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  like_count    BigInt       @default(0)
  save_count    BigInt     @default(0)
  share_count   BigInt     @default(0)
  comment_count BigInt     @default(0)
  likedBy       PostLike[] @relation("PostLikedByUsers")
  savedBy       PostSave[] @relation("PostSavedByUsers")
  createdAt     DateTime   @default(now())
  poll          Poll?      @relation("pollPost")
  comments Comment[]  @relation("post-comment")
  @@map("posts")
}

model PostLike {
  userId String
  postId String
  user   User   @relation("UserLikesPosts", fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation("PostLikedByUsers", fields: [postId], references: [id], onDelete: Cascade)
  commentid String
  comment Comment @relation("CommentLikedByUsers", references: [id], fields: [commentid])
  @@id([userId, postId, commentid])
  @@map("post_likes")
}

model PostSave {
  userId String
  postId String
  commentid String
  user   User   @relation("UserSavesPosts", fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation("PostSavedByUsers", fields: [postId], references: [id], onDelete: Cascade)
  comment Comment @relation("CommentSavedByUsers", references: [id], fields: [commentid])
  @@id([userId, postId, commentid])
  @@map("post_saves")
}



model Vote {
  id        String   @id @default(cuid())
  voter     User     @relation("UserVotes", fields: [userId], references: [id])
  userId    String
  poll      Poll     @relation("PollVotes", fields: [pollId], references: [id])
  pollId    String
  option    String
  createdAt DateTime @default(now())

  @@map("votes")
}

model Poll {
  id         String   @id @default(cuid())
  options    String[]
  user       User     @relation("UserPolls", fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  votes      Vote[]   @relation("PollVotes")
  vote_count Int      @default(0)
  post       Post     @relation("pollPost", fields: [postId], references: [id], onDelete: Cascade)
  postId     String   @unique
  createdAt  DateTime @default(now())
  score_board String
  
  @@map("polls")
}
model Comment {
  id String @id @default(cuid())
  userId String
  user User      @relation("comment", references: [id], fields: [userId], onDelete: Cascade)
  post Post   @relation("post-comment",references: [id], fields: [postId] ,onDelete: Cascade)
  postId String  
 comment String
 createdAt DateTime @default(now())
 parentId String? 
   like_count    BigInt       @default(0)
  save_count    BigInt     @default(0)
  share_count   BigInt     @default(0)
  comment_count BigInt     @default(0)
  likedBy       PostLike[] @relation("CommentLikedByUsers")
  savedBy       PostSave[] @relation("CommentSavedByUsers")
 parent Comment? @relation("comment-reply", references: [id], fields: [parentId], onDelete: Cascade)
 replies Comment[]  @relation("comment-reply")
  @@map("comment" )
}
model Follow {
  followerId String
  follower User @relation("user-follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following User @relation("user-following", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  @@unique([followerId, followingId])
  @@map("follows")
}